// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Twikker.Data;
using Twikker.Data.Models;

namespace Twikker.Data.Migrations
{
    [DbContext(typeof(TwikkerContext))]
    [Migration("20180413163428_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("Twikker.Data.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("CreatorId");

                    b.Property<int>("PostId");

                    b.HasKey("CommentId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Twikker.Data.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("CreatorId");

                    b.HasKey("PostId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Twikker.Data.Models.Reaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CommentId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("CreatorUserId");

                    b.Property<int?>("PostId");

                    b.Property<int>("ReactionType");

                    b.HasKey("ReactionId");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("PostId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Twikker.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("NickName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.HasIndex("NickName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Twikker.Data.Models.Comment", b =>
                {
                    b.HasOne("Twikker.Data.Models.User", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Twikker.Data.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Twikker.Data.Models.Post", b =>
                {
                    b.HasOne("Twikker.Data.Models.User", "Creator")
                        .WithMany("Posts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Twikker.Data.Models.Reaction", b =>
                {
                    b.HasOne("Twikker.Data.Models.Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId");

                    b.HasOne("Twikker.Data.Models.User", "Creator")
                        .WithMany("Reactions")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Twikker.Data.Models.Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId");
                });
#pragma warning restore 612, 618
        }
    }
}
